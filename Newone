ss
<div class="container">
  <h2>User Details</h2>
  <form (ngSubmit)="onSubmit()" #userForm="ngForm">
    <div class="form-group">
      <label for="firstName">First Name:</label>
      <input type="text" class="form-control" id="firstName" required [(ngModel)]="user.firstName" name="firstName">
    </div>

    <div class="form-group">
      <label for="mobileNumber">Mobile Number:</label>
      <input type="text" class="form-control" id="mobileNumber" required [(ngModel)]="user.mobileNumber" name="mobileNumber">
    </div>

    <div class="form-group">
      <label for="branch">Branch:</label>
      <input type="text" class="form-control" id="branch" required [(ngModel)]="user.branch" name="branch">
    </div>

    <div class="form-group">
      <label for="otp">Mobile OTP:</label>
      <input type="text" class="form-control" id="otp" [(ngModel)]="user.otp" name="otp">
    </div>

    <button type="submit" class="btn btn-primary">Confirm</button>
  </form>
</div>
ddffffffff
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-user-details',
  templateUrl: './user-details.component.html',
  styleUrls: ['./user-details.component.css']
})
export class UserDetailsComponent {
  user: any = {
    firstName: '',
    mobileNumber: '',
    branch: '',
    otp: ''
  };

  constructor(private http: HttpClient) {}

  onSubmit() {
    // Generate OTP
    this.http.post('http://localhost:8080/mobileAPI/generate', this.user.mobileNumber)
      .subscribe(
        response => {
          console.log('OTP sent successfully');
          // Handle successful OTP generation
        },
        error => {
          console.error('Error generating OTP', error);
          // Handle error
        }
      );

    // Verify OTP (This would be typically triggered after user receives and enters OTP)
    if (this.user.otp) {
      this.http.post('http://localhost:8080/mobileAPI/verify', {
        mobileNumber: this.user.mobileNumber,
        otp: this.user.otp
      }).subscribe(
        response => {
          console.log('OTP verified successfully');
          // Handle successful OTP verification
        },
        error => {
          console.error('Error verifying OTP', error);
          // Handle error
        }
      );
    }
  }
}




gggggg


import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { UserDetailsComponent } from './user-details/user-details.component';

@NgModule({
  declarations: [
    AppComponent,
    UserDetailsComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


kkkkkkkk



import org.springframework.stereotype.Service;

import java.util.Random;

@Service
public class OTPService {
    
    private String generatedOtp;
    
    public String generateOTP(String mobileNumber) {
        Random random = new Random();
        generatedOtp = String.format("%06d", random.nextInt(999999));
        // Save the OTP and mobile number for verification (in memory or DB)
        return generatedOtp;
    }

    public boolean verifyOTP(String mobileNumber, String otp) {
        // Verify the OTP with the saved OTP
        return generatedOtp != null && generatedOtp.equals(otp);
    }
}



kkkkkk


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/mobileAPI")
public class OTPController {

    @Autowired
    private OTPService otpService;

    @PostMapping("/generate")
    public ResponseEntity<String> generateOtp(@RequestBody String mobileNumber) {
        String otp = otpService.generateOTP(mobileNumber);
        return ResponseEntity.ok(otp);
    }

    @PostMapping("/verify")
    public ResponseEntity<Boolean> verifyOtp(@RequestBody OTPRequest otpRequest) {
        boolean isValid = otpService.verifyOTP(otpRequest.getMobileNumber(), otpRequest.getOtp());
        return ResponseEntity.ok(isValid);
    }
}

class OTPRequest {
    private String mobileNumber;
    private String otp;

    // Getters and Setters
}

ÃŸ
