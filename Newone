import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { debounceTime, switchMap, catchError } from 'rxjs/operators';
import { of } from 'rxjs';
import { EmailService } from './email.service';  // Service for backend API call

@Component({
  selector: 'app-email',
  templateUrl: './email.component.html',
  styleUrls: ['./email.component.css']
})
export class EmailComponent implements OnInit {
  emailForm: FormGroup;

  constructor(private fb: FormBuilder, private emailService: EmailService) {}

  ngOnInit(): void {
    this.emailForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]]
    });

    this.emailForm.get('email')?.valueChanges.pipe(
      debounceTime(500),  // Wait for 500ms after typing stops
      switchMap(email => this.emailService.validateEmail(email)),  // Call backend API
      catchError(() => of(null))  // Handle any errors
    ).subscribe(response => {
      if (response && response.valid) {
        // Handle valid email
      } else {
        // Handle invalid email
      }
    });
  }
}
