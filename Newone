import javax.validation.Constraint;
import javax.validation.Payload;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Constraint(validatedBy = AsteriskOnlyValidator.class)
@Target({ ElementType.FIELD, ElementType.PARAMETER })
@Retention(RetentionPolicy.RUNTIME)
public @interface AsteriskOnly {
    String message() default "The string must contain only asterisks (*)";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}

dafafgsgs
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

public class AsteriskOnlyValidator implements ConstraintValidator<AsteriskOnly, String> {

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null || value.isEmpty()) {
            return true;  // or return false if you don't want to allow null/empty strings
        }
        return value.matches("[*]+");
    }
}
