@Service
public class EmailValidationService {

    @Autowired
    private MemberLookupRepository memberLookupRepository;

    public boolean isEmailValid(String email, String userId) {
        // Extract the domain part of the email
        String emailDomain = email.split("@")[1];

        // Check if the domain contains a wildcard '*'
        if (emailDomain.contains("*")) {
            // Case 2: Domain contains a wildcard '*'
            // Replace the '*' with SQL '%' for pattern matching
            return memberLookupRepository.findByWildcardDomain(userId, emailDomain).isPresent();
        } else {
            // Case 1: Domain does not contain a wildcard '*'
            // Perform an exact match query
            return memberLookupRepository.findByExactDomain(userId, emailDomain).isPresent();
        }
    }
}
